---
swagger: "2.0"
info:
  description: |
    wm-aop RESTful API provides the ability to define mocks within webMethods Integration Server.  Note that where _paths_ are shown, they should be prepended with the base path, eg, when looking at /define/advice the actual path you call is /rest/org/wmaop/define/advice
    
    Being familiar with [wm-jbehave stories](https://github.com/wmaop/wm-jbehave/wiki/Syntax-for-creating-JBehave-stories) helps to identify use cases and ways to use the API.
    
    Note that the examples show responses when the _Accept:_ header is set with _text/xml_.   Setting with _application/json_ is similarly valid where suitable for your tooling.  Without the _Accept:_ header you may receive a default response of html.
    
    This documentation is auto-generated from the [Swagger definition of the API](https://github.com/wmaop/wm-aop/blob/master/src/docs/swagger/swagger_wmaop.yaml)
  version: "1.1.1"
  title: "wm-aop"
  contact: "info@wmaop.org"
host: "localhost:5555"
basePath: "/rest/org/wmaop"
schemes:
- "http"
security:
- basic: []
paths:
  /define/advice/{adviceId}:
    get:
      summary: "Get advice details"
      description: |
        Specify the adviceId to see details of that advice or leave the adviceId null for all registered advices.   Returned values is an IData record structure. 
        #### Example
        If we register a simple mock, such as that shown in define fixedResponse, then with
        ````
        GET http://localhost:5555/rest/org/wmaop/define/advice/myMockingId
        ````
        we receive the response of:
        ````
        <?xml version="1.0" encoding="UTF-8"?>
        <Values version="2.0">
            <value name="id">myMockingId</value>
            <value name="$resourceID">myMockingId</value>
            <record name="advice" javaclass="com.wm.util.Values">
                <record name="myMockingId" javaclass="com.wm.util.Values">
                    <value name="adviceId">myMockingId</value>
                    <value name="remit">SessionScope[5cf64a1073db108abcec86e8b9b84830]</value>
                    <record name="pointcut" javaclass="com.wm.util.Values">
                        <record name="flowPositionMatcher" javaclass="com.wm.util.Values">
                            <value name="id">pub.jms:send</value>
                            <value name="type">FlowPositionMatcher</value>
                            <value name="serviceName">pub.jms:send</value>
                        </record>
                        <value name="interceptPoint">INVOKE</value>
                        <record name="pipelineMatcher" javaclass="com.wm.util.Values">
                            <value name="id">pub.jms:send</value>
                            <value name="type">AlwaysTrueMatcher</value>
                        </record>
                    </record>
                    <record name="interceptor" javaclass="com.wm.util.Values">
                        <record name="response0" javaclass="com.wm.util.Values">
                            <value name="fileName">mypipeline.xml</value>
                            <record name="JMSMessage" javaclass="com.wm.util.Values">
                                <record name="header" javaclass="com.wm.util.Values">
                                    <value name="JMSCorrelationID">ABC123</value>
                                </record>
                            </record>
                        </record>
                        <number name="invokeCount" type="Integer">0</number>
                        <value name="name">CannedResponse:</value>
                        <value name="type">CannedResponseInterceptor</value>
                        <value name="responseSequence">SEQUENTIAL</value>
                    </record>
                    <value name="state">ENABLED</value>
                </record>
            </record>
        </Values>
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: "Id of the advice.  Applies to any form of advice: scenario; exception; fixedResponse; assertion."
        required: false
        type: "string"
      responses:
        200:
          description: "IData structure of advices."
    delete:
      summary: "Delete an advice"
      description: |
        Delete an advice, reverting back to standard behaviour for that service."
        #### Example
        Deleting an advice with the id of _myMockingId_
        ````
        DELETE http://localhost:5555/rest/org/wmaop/define/advice/myMockingId
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: "Id of the advice.  Applies to any form of advice: scenario; exception; fixedResponse; assertion.  The adviceId is mandatory otherwise no delete occurs."
        required: true
        type: "string"
      responses:
        200:
          description: "200 Returned in all cases even when no advice exists for the id"
  /define/assertion/{adviceId}:
    get:
      summary: "Get simplified details of an assertion (Or indeed any advice...)"
      description: |
        Retrieves simplified details of the assertion to allow easy check of the number of times the assertion was invoked when its condition matched (Ie, pipeline state matched the condition applied or pure invokation count where no condition occurs).
        
        The assertion (And mock) lookup uses the adviceId as a prefix rather than an exact match. This allows a combined count for mocks or assertions where they begin with the id.  So, mocks with adviceId's of _adviceMock1_ and _adviceMock2_ count have their counts tallied by looking up _adviceMock_.  For example, you may have one of multiple services called, checking the prefix allows a single test to for an invoke count of 1 to prove that one was invoked.  
        #### Example
        Making a request for the assertion name of _myMockingId_:
        ````
        GET http://localhost:5555/rest/org/wmaop/define/assertion/myAssertion
        ````
        Gives the response of:
        ````
        <?xml version="1.0" encoding="UTF-8"?>
        <Values version="2.0">
            <value name="adviceId">myAssertion</value>
            <number name="invokeCount" type="Integer">0</number>
        </Values>
        ````
        Note that all registered advices are _assertable_ and as such you can specify any {adviceId} to retrieve its invoke count, e.g. ````GET http://localhost:5555/rest/org/wmaop/define/assertion/myMockingId```` to see an invoke count of the simple mock defined elsewhere here.
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The ID of the assertion or any other advice"
        required: true
        type: "string"
      responses:
        200:
          description: "A response indicating the invoke count"
          schema:
            $ref: "#/definitions/Assertion Response"
    post:
      summary: "Create an assertion"
      description: |
        Firing mocks and testing pipeline values might be enough to satisfy you that the test has worked, but sometimes its useful to know that a particular service has been invoked and how many times (Eg, if the service has iterated some data, did it action the correct number?). Its also useful to know if a service has produced the expected output but it might not be possible to check the eventual pipeline contents due to values being dropped, etc.
        
        Using Assertions allows you to 'peek' at the pipeline and check that something has happend. Just like mocks, assertions can have conditions applied to them so that the assertion only registers as invoked if the condition is met.
        
        Note that you only need assertions when checking flow through a service, usually before or after a particular service of interest is invoked. If you want to check that your mocks have fired, use a GET /define/assertion/{adviceId} on a mock for a summary of its invokation count
        #### Example
        Creating an assertion called _postAddingNumbersAssertion_ which is invoked _after_ the _serviceName_ of _pub.math:addInts is called and the pipeline _condition_ is that the _value_ in the pipeline is 9.   Note that the URL is fully URL encoded to escape the spaces, colons and equals symbols.  Failure to correctly encode the URL will lead to incorrect behaviour.
        ````
        POST http://localhost:5555/rest/org/wmaop/define/assertion/postAddingNumbersAssertion?serviceName=pub.math%3AaddInts&condition=value%20%3D%3D%209&interceptPoint=AFTER
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The ID of the assertion which also forms its adviceId"
        required: true
        type: "string"
      - name: "serviceName"
        in: "query"
        description: "Fully qualified name of the service which this assertion will interact with" 
        required: true
        type: "string"
      - name: "condition"
        in: "query"
        description: "A JEXL pipeline expression to test whether this assertion is applicable. See [Pipeline Expressions Using JEXL](https://github.com/wmaop/wm-jbehave/wiki/Pipeline-Expressions-Using-JEXL) for details on how to define the expressions."
        required: false
        type: "string"
      - name: "interceptPoint"
        in: "query"
        description: "The point of interception and either _before_, _invoke_ or _after_ (Case insensitive).  Assertions are generally set either _before_ or _after_ a service.  Setting to _invoke_ will replace the service with the assertion, effectively eliminating the original service and having no effect on the pipeline."
        required: true
        type: "string"
      - name: "scope"
        in: "query"
        description: "The scope to which this assertion applies and can be either _session_, _user_ or _global_ (Case insensitive)"
        required: false
        type: "string"
        default: "user"
      - name: "username"
        in: "query"
        description: "When the scope is _user_ the username to which this applies.  If not supplied then the user is assumed to be the authenticated user making the call."
        required: false
        type: "string"
        default: "Username that authenticated the request"
      responses:
        200:
          description: "Status 200"
    delete:
      summary: "Delete an assertion"
      description: |
        Delete an assertion by using its adviceId.
        #### Example
        ````
        DELETE http://localhost:5555/rest/org/wmaop/define/assertion/myMockingId
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The ID of the assertion"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200 returned in all cases even when adviceId doesnt exist"
  /define/exception/{adviceId}:
    post:
      summary: "Create an exception"
      description: |
        Testing of behaviour should include negative paths where exceptional circumstances need handling and exeception handling requires execution. Instead of a service executing, its possible to raise an exception instead thereby simulating a failure.
        
        Exceptions defined this way are assertable and so can be checked to verify they've been invoked using ````GET /define/assertion/{assertionId}````
        #### Example
        Preventing the _pub.jms:send_ service from opperating instead an _java.lang.UnsupportedOperationException_ is thrown.  In this example, no scope is supplied so the effect is global across IS.
        ````
        POST http://localhost:5555/rest/org/wmaop/define/exception/myExceptionId?serviceName=pub.jms%3Asend&interceptPoint=invoke&exception=java.lang.UnsupportedOperationException
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The ID of the exception"
        required: true
        type: "string"
      - name: "serviceName"
        in: "query"
        description: "Fully qualified name of the service which this exception will interact with" 
        required: true
        type: "string"
      - name: "exception"
        in: "query"
        description: "The full classname of the exception to raise, such as _java.lang.RuntimeException_ or _com.wm.app.b2b.server.ServiceException_.  The exception class name must be any java class that is Throwable and have a String constructor (Ie one where the exception message is passed in; This is the norm for most exceptions)" 
        required: true
        type: "string"
      - name: "condition"
        in: "query"
        description: "A JEXL pipeline expression to test whether this assertion is applicable. Useful to raise an exception instead of the service on a particular pipeline state or to raise an exception after as service is called, etc.  See [Pipeline Expressions Using JEXL](https://github.com/wmaop/wm-jbehave/wiki/Pipeline-Expressions-Using-JEXL) for details on how to define the expressions."
        required: false
        type: "string"
      - name: "interceptPoint"
        in: "query"
        description: "The point to raise the exception and either _before_, _invoke_ or _after_ (Case insensitive).  Setting to _invoke_ will replace the service and trigger an exception instead of the service behaviour."
        required: true
        type: "string"
      - name: "scope"
        in: "query"
        description: "The scope to which this mock applies and can be either _session_, _user_ or _global_ (Case insensitive)"
        required: false
        type: "string"
        default: "user"
      - name: "username"
        in: "query"
        description: "When the scope is _user_ the username to which this applies.  If not supplied then the user is assumed to be the authenticated user making the call."
        required: false
        type: "string"
        default: "Username that authenticated the request"
      responses:
        200:
          description: "Status 200 in all cases"
    delete:
      summary: "Delete an exception"
      description: |
        Delete an exception by its _adviceId_
        #### Example
        ````
        DELETE http://localhost:5555/rest/org/wmaop/define/exception/myExceptionId
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The adviceId used to register the exception"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200 in all cases"
  /define/fixedResponse/{adviceId}:
    post:
      summary: "Create a fixed response mock"
      description: |
        Create a mock of a service to return a value in place of that service.
        #### Example
        Override the _pub.math:addInts_ service with a mock which has an assertionId of _fixedValue_ always returns a _value_ of 10.
        ````
        POST http://localhost:5555/rest/org/wmaop/define/fixedResponse/fixedValueMock?serviceName=pub.math%3AaddInts&interceptPoint=invoke
        ````
        With a body of:
        ````
        <IDataXMLCoder version="1.0">
          <record javaclass="com.wm.data.ISMemDataImpl">
            <value name="value">10</value>
          </record>
        </IDataXMLCoder>        
        ````        
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The ID of the assertion which also forms its adviceId"
        required: true
        type: "string"
      - name: "serviceName"
        in: "query"
        description: "Fully qualified name of the service which this mock will interact with" 
        required: true
        type: "string"
      - name: "condition"
        in: "query"
        description: "A JEXL pipeline expression to test whether this assertion is applicable. See [Pipeline Expressions Using JEXL](https://github.com/wmaop/wm-jbehave/wiki/Pipeline-Expressions-Using-JEXL) for details on how to define the expressions."
        required: false
        type: "string"
      - name: "interceptPoint"
        in: "query"
        description: "The point of interception and either _before_, _invoke_ or _after_ (Case insensitive).  Mocks are generally set to invoke to replace the service with other behaviour.  Its also possible to use with _before_ or _after_ to insert or overwrite values in the pipeline to modify behaviour."
        required: true
        type: "string"
      - name: "scope"
        in: "query"
        description: "The scope to which this mock applies and can be either _session_, _user_ or _global_ (Case insensitive)"
        required: false
        type: "string"
        default: "user"
      - name: "username"
        in: "query"
        description: "When the scope is _user_ the username to which this applies.  If not supplied then the user is assumed to be the authenticated user making the call."
        required: false
        type: "string"
        default: "Username that authenticated the request"
      - name: "calledBy"
        in: "query"
        description: "Only invoked if this parameter matches or prefixes one of the services in the call stack.  Works in combination with condition or on its own and can ensure mock only works when called from a package (Eg _pub.foo_) or specific service (Eg _pub.foo:bar_)" 
        required: false
        type: "string"
      - name: "body"
        in: "body"
        description: "IData which is used to set the pipeline when this mock is executed"
        required: true
      responses:
        200:
          description: "Status 200 in all cases"
    delete:
      summary: "Delete a fixed response mock"
      description: |
        Delete a fixed response mock using its adviceId.
        #### Example
        Delete the mock named _fixedValueMock_ from the create example:
        ````
        DELETE http://localhost:5555/rest/org/wmaop/define/fixedResponse/fixedValueMock
        ````        
      parameters:
      - name: "adviceId"
        in: "path"
        description: "The ID of the fixed response mock"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200 in all cases"
  /define/scenario/{adviceId}:
    post:
      summary: "Create a scenario"
      description: |
        Sometimes, simplistic mocks are not sufficient and more complex mock behaviour is required.  Creation of a scenario mock allows the definition of conditions on when to trigger the mock and the type of response required. The structure is such that different outputs from the mock can occur based on pipeline values and the sequence of data returned can be varied.
         
        For full information see the wiki page to [create behavioural driven scenario mocks](https://github.com/wmaop/wm-aop/wiki/Creating-Behavioural-Driven-Scenario-mocks-from-RESTful-calls)
        #### Example
        Create a simple scenario mock with the adviceId of _mockJmsSendTwoAlternatives_ to replace _pub.jms:send_ such that calling it returns two alternate responses each time the service is invoked
        ````
        POST http://localhost:5555/rest/org/wmaop/define/scenario
        <scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:noNamespaceSchemaLocation="../../../main/xsd/bddSchema.xsd" id="mockJmsSendTwoAlternatives">
            <given>
                <service intercepted="invoke">pub.jms:send</service>
            </given>
            <when id="sendingJmsMessage">
                <then dispatch="sequential">
                  <return><![CDATA[<IDataXMLCoder version="1.0">
                    <record javaclass="com.wm.data.ISMemDataImpl">
                      <value name="fileName">mypipeline.xml</value>
                      <record name="JMSMessage" javaclass="com.wm.data.ISMemDataImpl">
                        <record name="header" javaclass="com.wm.data.ISMemDataImpl">
                          <value name="JMSCorrelationID">ABC123</value>
                        </record>
                      </record>
                    </record>
                    </IDataXMLCoder>]]>
                  </return>
                  <return><![CDATA[<IDataXMLCoder version="1.0">
                    <record javaclass="com.wm.data.ISMemDataImpl">
                      <value name="fileName">mypipeline.xml</value>
                      <record name="JMSMessage" javaclass="com.wm.data.ISMemDataImpl">
                        <record name="header" javaclass="com.wm.data.ISMemDataImpl">
                          <value name="JMSCorrelationID">DEF456</value>
                        </record>
                      </record>
                    </record>
                    </IDataXMLCoder>]]>
                  </return>
                </then>
            </when>
        </scenario>        
        ````
      parameters:
      - name: "adviceId"
        in: "path"
        description: |
          adviceId of the scenario.  When present, overrides the value in the <scenario id...> otherwise the id in the scenario is used as the adviceId 
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200 in all cases"
    delete:
      summary: "Delete a scenario"
      description: |
        Delete a scenario mock
        #### Example
        Delete the scenario named _mockJmsSendTwoAlternatives_ from the create example:
        ````
        DELETE http://localhost:5555/rest/org/wmaop/define/scenario/mockJmsSendTwoAlternatives
        ````        
      parameters:
      - name: "adviceId"
        in: "path"
        description: " using its id, either the adviceId supplied when creating or if not present then the <scenario id...>"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200 in all cases"
  /reset:
    get:
      summary: "Reset the mocking framework based on scope"
      descrition: |
        Reset the framework, bulk removing advice's (Mocks, assertions, scenarios) within that scope.  Calling with a scope of:
        * No scope defined - Calling without the scope specified removes advice's registered as _user_ scope for the user making the call and _session_ scoped, again for the current user making the call only - _global_ scoped advice and those for other users (Ie set as _session_ and _user_).  Applicable when running tests in a shared server.
        * ALL - removes all mocks, irrespective of original scope and sets the framework to DISABLED - Effectively removing it from the runtime.
        * SESSION - removes advice for the current http session
        * USER - removes advice for the current user that's making the call (Eg, you make the call authenticating as Administrator and all advice registered as _user_ scope for Administrator will be removed.  Applicable on a shared server where each user is interacting with their own user  
        * GLOBAL - removes advice registered as a _global_ scope
      parameters:
      - name: "scope"
        in: "query"
        description: "Scope defines the limit to what is reset.  Specifying a scope of ALL resets all scopes and stubs"
        required: false
        type: "string"
      responses:
        200:
          description: "Status 200 in all cases"
  /state:
    get:
      summary: "Get the state of the framework"
      description: |
        Returns state of the framework to show if its operational.
        #### Example
        Newly started server with no mocks defined shows the state as disabled.
        ````
        GET http://localhost:5555/rest/org/wmaop/state
        ````
        Return a value of:
        ````
        <?xml version="1.0" encoding="UTF-8"?>
        <Values version="2.0">
          <value name="enabled">false</value>
        </Values>
        ````
      parameters: []
      responses:
        200:
          description: "Status 200 in all cases"
          schema:
            $ref: "#/definitions/enabled"
    post:
      summary: "Set the state of the framework"
      description: |
        Used to enable or disable the framework.  Note this doesnt reset any advice so can be used to switch off mocking, verify behaviour and switch mocking back on without having to redefine the mocks.
        
        Initial state on starting the server is disabled.  Registering an advice automatically sets the state to enabled.
        
        Note for convenience, the enabled parameter can also be supplied on the GET so that its easy to enable/disable from a browser, etc.
        #### Example
        Enable the framework.
        ````
        POST http://localhost:5555/rest/org/wmaop/state?enabled=true
        ````
      parameters:
      - name: "enabled"
        in: "query"
        description: "true or false to enable or disable the framework"
        required: true
        type: "string"
      responses:
        200:
          description: "Status 200 in all cases"
          schema:
            $ref: "#/definitions/status"
  /verify:
    get:
      summary: "Test the framework is operational"
      description: |
        Used after initial installation or to check if the framework is installed and functioning correctly.
        #### Example
        ````
        GET http://localhost:5555/rest/org/wmaop/verify
        ````
        Returns a status indicating it is:
        ````
        <?xml version="1.0" encoding="UTF-8"?>
        <Values version="2.0">
          <value name="status">Mocking framework operational</value>
        </Values>
        ````
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/status"
securityDefinitions:
  basic:
    type: "basic"
definitions:
  Assertion Response:
    type: "object"
    properties:
      adviceId:
        type: "string"
        description: "ID of the assertion or other advice"
      invokeCount:
        type: "integer"
        format: "int32"
        description: "Number of times this assertion or advice was invoked"
  enabled:
    type: "object"
    required:
    - "enabled"
    properties:
      status:
        type: "string"
        description: "Returns 'true' is mocking framework is enabled and operational otherwise 'false' indicating it is switched off and not intercepting calls."
  status:
    type: "object"
    required:
    - "status"
    properties:
      status:
        type: "string"
        description: "Should show 'Mocking framework operational' if everything is ok"
        